import random
from abc import ABC, abstractmethod
from random import choice, uniform


#### Interfejs Heroes

class HeroesKnight(ABC):
    @abstractmethod
    def playKnight(self):
        pass
    def descKnight(self):
        pass
    
 #### Interfejs Wizard   
class HeroesWizard(ABC):
    @abstractmethod
    def playWizard(self):
        pass
    def descWizard(self):
        pass
    
 #### Interfejs Gardener    
class HeroesGardener(ABC):
    @abstractmethod
    def playGardener(self):
        pass
    def descGardener(self):
        pass
    
    
class Role(ABC):
    @abstractmethod
    def set_new_role(self):
        pass

    def get_new_role(self):
        pass
    
    
### Klasa Person dziedzczy po interfejsie Role

class Person(Role):
    def __init__(self, name, gender, fatherName, motherName, DateOfBirth):
        self.name = name
        self.gender = gender
        self.fatherName = fatherName
        self.motherName = motherName
        self.DateOfBirth = DateOfBirth
        self.role = ''
  
    def describe(self):
        return '{0}, {1} of {2} and {3}. '.format(
            self.name, 'son' if self.gender == 'm' else 'daugher',
            self.fatherName, self.motherName, self.DateOfBirth)

    def get_role(self):
        return self.role
    
    def set_new_role(self,role):
        self.role=role

    def get_new_role(self):
        return self.role
    


 
    
 
        


### Klasa Wizard dziedzyczy po interfejsie HeroresWizard i klasie Person

class Wizard(HeroesWizard,Person):
    NICE_WEATHER_PROBABILITY = 0.75

    def __init__(self, name, gender, fatherName, motherName, DateOfBirth):
        super().__init__(name, gender, fatherName, motherName, DateOfBirth)
        self.numberOfPlantedTrees = 0
        self.random_generator = random.Random()  # instantiation of rand. gen.
        self.role = 'Wizard'
       
        
    def descWizard(self):
        return 'Wizard {0}, {1} of {2} and {3}. Planted {4} trees. '.format(
            self.name, 'son' if self.gender == 'm' else 'daugher',
            self.fatherName, self.motherName, self.DateOfBirth, self.numberOfPlantedTrees)

    def playWizard(self):
        if self.random_generator.random() < self.NICE_WEATHER_PROBABILITY:
            self.numberOfPlantedTrees += 1
            return 'CZARUJĘ @@@@@@@@@@@@@@...'
        return 'KTOŚ MNIE ZACZAROWAŁ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@...'
    

    

        

### Klasa Knight dziedzyczy po interfejsie HeroesKnight i klasie Person

class Knight(HeroesKnight,Person):
    def __init__(self, name, gender, fatherName, motherName, DateOfBirth, weapon='', mount='', strength=1):
        super().__init__(name, gender, fatherName, motherName, DateOfBirth)
        self.weapon = weapon
        self.mount = mount
        self.strength = strength
        self.role = 'Knight'
                   

    def descKnight(self):
        return 'Knight {0}, {1} of {2} and {3}. Fights using a {4} rides on a {5}. '.format(
            self.name, 'son' if self.gender == 'm' else 'daugher',
            self.fatherName, self.motherName, self.DateOfBirth, self.weapon, self.mount,
            'Can fight' if self.strength > 0 else 'Needs a rest')

    def playKnight(self):
        if self.strength <= 0:
            self.strength = 1.0
            return 'Resting...'
        self.strength -= 0.25
        return 'Figting...'
    

  

 ### Klasa gardener dziedzyczy po interfejsie HeroesGardener i klasie Person

class Gardener(HeroesGardener,Person):
    NICE_WEATHER_PROBABILITY = 0.75

    def __init__(self, name, gender, fatherName, motherName, DateOfBirth):
        super().__init__(name, gender, fatherName, motherName, DateOfBirth)
        self.numberOfPlantedTrees = 0
        self.random_generator = random.Random()  # instantiation of rand. gen.
        self.role = 'Gardener'


    def descGardener(self):
        return 'Gardener {0}, {1} of {2} and {3}. Planted {4} trees. '.format(
            self.name, 'son' if self.gender == 'm' else 'daugher',
            self.fatherName, self.motherName, self.DateOfBirth)

    def playGardener(self):
        if self.random_generator.random() < self.NICE_WEATHER_PROBABILITY:
            self.numberOfPlantedTrees += 1
            return 'Planting a tree...'
        return 'Looking at trees growing in the rain...'
    



########## Klasa Writer

   

########### Klasa Master z dodaną nową rolą ChangeRole()

class Master():
    def __init__(self):
        self.list_of_persons = []

    def describe(self):
        for p in self.list_of_persons:
            print(p.Desc())

    def play(self):
        for i in range(10):
            person = choice(self.list_of_persons);
            # print(person.describe())
            while uniform(0, 1) < 0.5:
                if person.get_role() == 'Knight':
                    print(person.Fight())
                elif person.get_newRole() == 'Gardener':
                    print(person.Play())

### funkcja ChangeROle sprawdza czy person z metodą get_role ma przyjmuje obiekt KNIGHT
### jeśli tak kontnunuje, przez funkcję set_new_role ustawia nowy obiekt Wizard i metodą
### get_net_role sprawdza czy obiekt zgadza się z set jeśli tak wykonuje play() 

    def ChangeRole(self):
        for i in range(10):
            person = choice(self.list_of_persons);
            #print(person.Desc())
            try:
                while uniform(0, 1) < 0.5:
                    if person.get_role() == 'Knight':
                        continue
                        person.set_new_role('Wizard')
                    if person.get_new_role()=='Wizard':
                        print(person.playWizard())
            except AttributeError:
                print('Błąd !!')
                

    def set_inhabitants(self):
        self.list_of_persons.append(Gardener('Gardener', 'f', 'Oldoak', 'Sunnydaisy', '19930912'));
        self.list_of_persons.append(Knight('Knig', 'm', 'Highspirit', 'Mistymorning', 'spear', 'dragon', '19841212'));
        self.list_of_persons.append(Wizard('jAN', 'm', 'ADAM', 'EWA', '19651201'));


def main():
    m = Master()
    m.set_inhabitants()
    # m.play()
    m.ChangeRole()


if __name__ == '__main__':
    main()
