import random
from abc import ABC, abstractmethod
from random import choice, uniform


### Interfejs Role

class Role(ABC):
    @abstractmethod
    def play(self):
        pass
    

       


class Person():
    def __init__(self, name, gender, fatherName, motherName, DateOfBirth):
        self.name = name
        self.gender = gender
        self.fatherName = fatherName
        self.motherName = motherName
        self.DateOfBirth = DateOfBirth
        self.role = None
  
    def describe(self):
        return '{0}, {1} of {2} and {3}. '.format(
            self.name, 'son' if self.gender == 'm' else 'daugher',
            self.fatherName, self.motherName, self.DateOfBirth)

    def get_role(self):
        return self.role
        
    def set_new_role(self,role):
        self.role=role
        
    def get_new_role(self):
        return self.role

    def play_a_role(role):
        self.role.play()
        
        

class Wizard(Role,Person):
    NICE_WEATHER_PROBABILITY = 0.75
    def __init__(self, name, gender, fatherName, motherName, DateOfBirth):
        super().__init__(name, gender, fatherName, motherName,DateOfBirth)   
        self.numberOfPlantedTrees = 0
        self.random_generator = random.Random()  # instantiation of rand. gen.
        self.role = Wizard

    def play(self):
        if self.random_generator.random() < self.NICE_WEATHER_PROBABILITY:
            self.numberOfPlantedTrees += 1
            return 'CZARUJĘ @@@@@@@@@@@@@@...'
        return 'KTOŚ MNIE ZACZAROWAŁ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@...'
    

    

class Knight(Role,Person):
    def __init__(self, name, gender, fatherName, motherName, DateOfBirth, weapon='', mount='', strength=1):
        super().__init__(name, gender, fatherName, motherName,DateOfBirth)
        self.weapon = weapon
        self.mount = mount
        self.strength = strength
        self.role = Knight

    def play(self):
        if self.strength <= 0:
            self.strength = 1.0
            return 'Resting...'
        self.strength -= 0.25
        return 'Figting...'
    


class Gardener(Role,Person):
    NICE_WEATHER_PROBABILITY = 0.75
    def __init__(self, name, gender, fatherName, motherName, DateOfBirth):
        super().__init__(name, gender, fatherName, motherName,DateOfBirth)
        self.numberOfPlantedTrees = 0
        self.random_generator = random.Random()  # instantiation of rand. gen.
        self.role = Gardener

    def play(self):
        if self.random_generator.random() < self.NICE_WEATHER_PROBABILITY:
            self.numberOfPlantedTrees += 1
            return 'Planting a tree...'
        return 'Looking at trees growing in the rain...'



class Master():
    def __init__(self):
        self.list_of_persons = []

    def describe(self):
        for p in self.list_of_persons:
            print(p.Desc())

    def ChangeRole(self):
        for i in range(10):
            person = choice(self.list_of_persons);
            #print(person.Desc())
            while uniform(0, 1) < 0.5:
                if person.get_role() == Knight:
                    continue
                    person.set_new_role(Writer())
                if person.get_role()==Wizard:
                    print(person.play())
                    
                                     
    def set_inhabitants(self):
        self.list_of_persons.append(Gardener('Gardener', 'f', 'Oldoak', 'Sunnydaisy', '19930912'));
        self.list_of_persons.append(Knight('Knig', 'm', 'Highspirit', 'Mistymorning', 'spear', 'dragon', '19841212'));
        self.list_of_persons.append(Wizard('jAN', 'm', 'ADAM', 'EWA', '19651201'));
           
        

def main():
    m = Master()
    m.set_inhabitants()
    m.ChangeRole()

if __name__ == '__main__':
    main()
